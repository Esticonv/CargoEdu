@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject NotifierService Notifier
@inject TimerService Timer


@using R7P.MachineManagerService.WebSimulator.Models

<PageTitle>Home</PageTitle>

<h1>Машины</h1>

<button @onclick="OnStartButtomClick" disabled=@started> Start </button>
<button @onclick="OnStopButtomClick" disabled=@(!started)> Stop </button>

<p>Last update: @lastUpdate</p>

@if (machines == null) {
    <p><em>Press start</em></p>
}
else {
    <ul>
    @foreach (var machine in machines) {
        <li>        
        @machine.Name

        @foreach(var task in machine.Tasks) {
            <p>@task.ToString();</p>
            <progress value=@task.Progress> </progress>
        }
        @foreach (var cargo in machine.Сargoes) {
            <p>@cargo.ToString();</p>
        }
        </li>
    }
    </ul>
}

@if (string.IsNullOrEmpty(exceptionMessage) == false)
{
    <p>Ошибки: @exceptionMessage </p>
}


@code {
    private bool started = false;

    private MachineDto[]? machines;
    private string? exceptionMessage;

    private string lastUpdate=string.Empty;
    private string? _machineAddress;
    private string? _machineTaskAddress;

    protected override async Task OnInitializedAsync()
    {
        _machineAddress = Configuration.GetSection("ServicesUri").GetValue<string>("MachineManagerService_Machine");
        _machineTaskAddress = Configuration.GetSection("ServicesUri").GetValue<string>("MachineManagerService_MachineTask");
        await Timer.Start();
    }

    private void OnStartButtomClick()
    {
        started = true;
        Notifier.Notify += OnNotify;

    }

    private void OnStopButtomClick()
    {
        started = false;
        Notifier.Notify -= OnNotify;
        machines = null;
    }

    public async Task OnNotify(string key, int value)
    {
        await InvokeAsync(() =>
        {
            try {                
                var http = ClientFactory.CreateClient();
                machines = http.GetFromJsonAsync<MachineDto[]>(_machineAddress).Result;

                if (machines != null){
                    foreach (var machine in machines){
                        
                        machine.Tasks.Remove(machine.Tasks.FirstOrDefault(x => x.TaskType == 0));//Remove IdleTask from display                        
                        
                        var movingTask = machine.Tasks
                            .OrderBy(x => x.TaskOrder)
                            .FirstOrDefault(x => x.TaskType == 1);
                        if (movingTask != null) {
                            if (movingTask.Progress < 1.0d) {
                                movingTask.Progress += 0.1d;
                            }
                            if (movingTask.Progress >= 1.0d) {
                                movingTask.Progress = 1.0d;
                                movingTask.TaskType = 2;//Completed
                            }
                            http.PutAsJsonAsync(_machineTaskAddress, movingTask);
                        }
                        
                    }
                }
            }
            catch (Exception exception) {
                exceptionMessage = exception.Message;
            }
            finally {
                lastUpdate = DateTime.UtcNow.ToString();
                StateHasChanged();
            }
        });
    }

    public void Dispose() => Notifier.Notify -= OnNotify;
}
